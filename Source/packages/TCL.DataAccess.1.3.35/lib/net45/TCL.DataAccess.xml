<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TCL.DataAccess</name>
    </assembly>
    <members>
        <member name="M:TCL.DataAccess.MsSql.Extensions.AddParam(System.Data.SqlClient.SqlParameterCollection,System.String,System.Object)">
            <summary>
            Adds a parameter to the parameter collection with it's accompanying value.
            If the value passed in is null it will be converted to DBNull.Value.
            </summary>
            <param name="collection">The collection to add the parameter to.</param>
            <param name="parameterName">The name of the parameter. Like "@ParamName".</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="T:TCL.DataAccess.MsSql.SqlAccessorBase">
            <summary>
            Base class for any common connection to an MS Sql database.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new SqlAccessorBase object with the given connection string.
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlAccessorBase.ConfigureSqlCommand(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Use to configure the SqlCommand object before use.
            </summary>
            <param name="cmd">The SqlCommand object used for this request.</param>
            <param name="value">The command value.</param>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlAccessorBase.RunCommand``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlAccessorBase.RunCommandAsync``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="P:TCL.DataAccess.MsSql.SqlAccessorBase.ConnectionString">
            <summary>
            Gets the connection string that will be used for the Sql connection.
            </summary>
        </member>
        <member name="T:TCL.DataAccess.MsSql.SqlScriptAccessorBase">
            <summary>
            Base class for Sql database connections which use a simple script for querying.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new SqlScriptAccessorBase object with the given connection string
            </summary>
            <param name="cs">The connection string to the database.</param>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScript``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScript``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script async and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScript``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script async and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="SqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScript(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection})">
            <summary>
            Runs a script and does not get the results.
            </summary>
            <param name="SqlScript"></param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.RunScriptAsync(System.String,System.Action{System.Data.SqlClient.SqlParameterCollection})">
            <summary>
            Runs a script async and does not get the results.
            </summary>
            <param name="SqlScript"></param>
            <param name="parametersAction">An action detailing any modifications to the SqlParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.MsSql.SqlScriptAccessorBase.ConfigureSqlCommand(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Configures the SqlCommand object so the CommandType is "Text" and passes in the command text.
            </summary>
            <param name="cmd"></param>
            <param name="value"></param>
        </member>
        <member name="M:TCL.DataAccess.MySql.Extensions.AddParam(MySql.Data.MySqlClient.MySqlParameterCollection,System.String,System.Object)">
            <summary>
            Adds a parameter to the parameter collection with it's accompanying value.
            If the value passed in is null it will be converted to DBNull.Value.
            </summary>
            <param name="collection">The collection to add the parameter to.</param>
            <param name="parameterName">The name of the parameter. Like "@ParamName".</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="T:TCL.DataAccess.MySql.MySqlAccessorBase">
            <summary>
            Base class for any common connection to an MySql database.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new MySqlAccessorBase object with the given connection string.
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlAccessorBase.ConfigureMySqlCommand(MySql.Data.MySqlClient.MySqlCommand,System.String)">
            <summary>
            Use to configure the MySqlCommand object before use.
            </summary>
            <param name="cmd">The MySqlCommand object used for this request.</param>
            <param name="value">The command value.</param>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlAccessorBase.RunCommand``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlAccessorBase.RunCommandAsync``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="P:TCL.DataAccess.MySql.MySqlAccessorBase.ConnectionString">
            <summary>
            Gets the connection string that will be used for the MySql connection.
            </summary>
        </member>
        <member name="T:TCL.DataAccess.MySql.MySqlScriptAccessorBase">
            <summary>
            Base class for MySql database connections which use a simple script for querying.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new MySqlScriptAccessorBase object with the given connection string
            </summary>
            <param name="cs">The connection string to the database.</param>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScript``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScript``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script async and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScript``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script async and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="MySqlScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScript(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection})">
            <summary>
            Runs a script and does not get the results.
            </summary>
            <param name="MySqlScript"></param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.RunScriptAsync(System.String,System.Action{MySql.Data.MySqlClient.MySqlParameterCollection})">
            <summary>
            Runs a script async and does not get the results.
            </summary>
            <param name="MySqlScript"></param>
            <param name="parametersAction">An action detailing any modifications to the MySqlParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.MySql.MySqlScriptAccessorBase.ConfigureMySqlCommand(MySql.Data.MySqlClient.MySqlCommand,System.String)">
            <summary>
            Configures the MySqlCommand object so the CommandType is "Text" and passes in the command text.
            </summary>
            <param name="cmd"></param>
            <param name="value"></param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.Extensions.AddParam(Npgsql.NpgsqlParameterCollection,System.String,System.Object)">
            <summary>
            Adds a parameter to the parameter collection with it's accompanying value.
            If the value passed in is null it will be converted to DBNull.Value.
            </summary>
            <param name="collection">The collection to add the parameter to.</param>
            <param name="parameterName">The name of the parameter. Like ":ParamName". REMEMBER, the prefix for Postgres parameters are different than others!</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="T:TCL.DataAccess.Postgres.PostgresAccessorBase">
            <summary>
            Base class for any common connection to an Postgres database.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new PostgresAccessorBase object with the given connection string.
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresAccessorBase.ConfigurePostgresCommand(Npgsql.NpgsqlCommand,System.String)">
            <summary>
            Use to configure the PostgresCommand object before use.
            </summary>
            <param name="cmd">The PostgresCommand object used for this request.</param>
            <param name="value">The command value.</param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresAccessorBase.RunCommand``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresAccessorBase.RunCommandAsync``1(System.String,System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="value">The string to run on the server. What this is, is defined by higher classes.</param>
            <param name="getResults">A function that takes the results of the query and converts it to the output data type.</param>
            <returns></returns>
        </member>
        <member name="P:TCL.DataAccess.Postgres.PostgresAccessorBase.ConnectionString">
            <summary>
            Gets the connection string that will be used for the Postgres connection.
            </summary>
        </member>
        <member name="T:TCL.DataAccess.Postgres.PostgresScriptAccessorBase">
            <summary>
            Base class for Postgres database connections which use a simple script for querying.
            </summary>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.#ctor(System.String)">
            <summary>
            Creates a new PostgresScriptAccessorBase object with the given connection string
            </summary>
            <param name="cs">The connection string to the database.</param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScript``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataSet,``0})">
            <summary>
            Runs a script async and uses the full dataset of what is returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScript``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataTable,``0})">
            <summary>
            Runs the script async and gets the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScript``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScriptAsync``1(System.String,System.Action{Npgsql.NpgsqlParameterCollection},System.Func{System.Data.DataRow,``0})">
            <summary>
            Runs the script async and gets the first row in the first table returned.
            </summary>
            <typeparam name="T">The data type of the returned object.</typeparam>
            <param name="PostgresScript">The script to run.</param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
            <param name="getResults">A function that takes the results of the query and returns the indicated output.</param>
            <returns></returns>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScript(System.String,System.Action{Npgsql.NpgsqlParameterCollection})">
            <summary>
            Runs a script and does not get the results.
            </summary>
            <param name="PostgresScript"></param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.RunScriptAsync(System.String,System.Action{Npgsql.NpgsqlParameterCollection})">
            <summary>
            Runs a script async and does not get the results.
            </summary>
            <param name="PostgresScript"></param>
            <param name="parametersAction">An action detailing any modifications to the PostgresParameterCollection object.
            Use this for adding parameters to the request.</param>
        </member>
        <member name="M:TCL.DataAccess.Postgres.PostgresScriptAccessorBase.ConfigurePostgresCommand(Npgsql.NpgsqlCommand,System.String)">
            <summary>
            Configures the PostgresCommand object so the CommandType is "Text" and passes in the command text.
            </summary>
            <param name="cmd"></param>
            <param name="value"></param>
        </member>
    </members>
</doc>
